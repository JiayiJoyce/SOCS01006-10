library(shiny)
ui <- fluidPage(
"This is my first Shiny app!"
)
server <- function(input, output, session) {
}
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
ui <- fluidPage(
"This is my first Shiny app!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
data <- read.csv("/Users/chenjiayi/Desktop/Computational/SOCS01006-10/emdat_app.csv")
fluidPage("Disaster Statistics","Trends")
#
fluidPage(
h1("Disasters"),
"Statistics",
"Trends",
br(),
"Emdat",
strong("data")
)
fluidPage(
titlePanel("Disaster Statistics Trends")
)
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Disaster Statistics Trends")
)
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Disaster Statistics Trends")
)
sidebarLayout(
sidebarPanel(selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
mainPanel("the results will go here") # add elements for outputs
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
# Header
h1("Disaster statistics trends"),
# Sidebar layout
sidebarLayout(
# Sidebar panel
sidebarPanel(
selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
# Main panel
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
# Header
h1("Disaster statistics trends"),
# Sidebar layout
sidebarLayout(
# Sidebar panel
sidebarPanel(
selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
# Main panel
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
variable <- switch(input$variable,
"Deaths" = "deaths",
"Injuries" = "injuries",
"Homelessness" = "homelessness")
data %>%
filter(country == input$country,
Year >= input$year_range[1],
Year <= input$year_range[2]) %>%
ggplot(aes(Year, .data[[variable]])) +
geom_line() +
labs(y = input$variable)
})
}
shinyApp(ui, server)
if (!require("pacman")) {
install.packages("pacman")
}
pacman::p_load(
shiny,
ggplot2,
dplyr)
options(scipen=999)
data <- read.csv("/Users/chenjiayi/Desktop/Computational/SOCS01006-10/emdat_app.csv")
install.packages("shiny")
library(shiny)
if (!require("pacman")) {
install.packages("pacman")
}
pacman::p_load(
shiny,
ggplot2,
dplyr)
options(scipen=999)
data <- read.csv("/Users/chenjiayi/Desktop/Computational/SOCS01006-10/emdat_app.csv")
#the app part----
ui <- fluidPage(
# Header
h1("Disaster statistics trends"),
# Sidebar layout
sidebarLayout(
# Sidebar panel
sidebarPanel(
selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
# Main panel
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
variable <- switch(input$variable,
"Deaths" = "deaths",
"Injuries" = "injuries",
"Homelessness" = "homelessness")
data %>%
filter(country == input$country,
Year >= input$year_range[1],
Year <= input$year_range[2]) %>%
ggplot(aes(Year, .data[[variable]])) +
geom_line() +
labs(y = input$variable)
})
}
shinyApp(ui, server)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('week6_labsession')
shiny::runApp('myfirstshinyapp')
rm(list = ls())
energy_and_fuel <- read_csv("/Users/chenjiayi/Desktop/Computational/First-Summative-Assignment/Number of people with and without energy access (OWID based on World Bank, 2021).csv")
rm(list = ls())
energy_and_fuel <- read_csv("/Users/chenjiayi/Desktop/Computational/First-Summative-Assignment/Number of people with and without energy access (OWID based on World Bank, 2021).csv")
rm(list = ls())
energy_and_fuel <- read_csv("/Users/chenjiayi/Desktop/Computational/First-Summative-Assignment/Number of people with and without energy access (OWID based on World Bank, 2021).csv")
pacman::p_load(
tidyverse, # tidyverse pkgs including purrr
kableExtra,#table
flextable, #table
glue, #combining strings and objects
ggplot2)
# Filtered database used in the visualization
pacman::p_load(
tidyverse, # tidyverse pkgs including purrr
kableExtra,#table
flextable, #table
glue, #combining strings and objects
ggplot2)
rm(list = ls())
energy_and_fuel <- read_csv("/Users/chenjiayi/Desktop/Computational/First-Summative-Assignment/Number of people with and without energy access (OWID based on World Bank, 2021).csv")
energy_and_fuel <- read_csv("Number of people with and without energy access (OWID based on World Bank, 2021).csv")
setwd("/Users/chenjiayi/Desktop/Computational/troubleshooting-legends-not-showing")
energy_and_fuel <- read_csv("Number of people with and without energy access (OWID based on World Bank, 2021).csv")
#make column names machine readable
cleaned_energy_and_fuel<-janitor::clean_names(energy_and_fuel)
#creating three new columns: total_population, percentage_with_electricity_access and percentage_with_clean_fuel_access
percentage_energy_and_fuel <- cleaned_energy_and_fuel %>%
mutate(total_population = number_of_people_with_access_to_electricity +number_of_people_without_access_to_electricity) %>%
mutate(percentage_with_electricity_access= number_of_people_with_access_to_electricity / total_population) %>%
mutate(percentage_with_clean_fuel_access= number_with_clean_fuels_cooking/total_population)
#filtering out income-based entity and subsetting them into income_based_entity dataframe
income_based_entity <- percentage_energy_and_fuel %>%
filter(str_detect(entity, "(?i)high|low|middle") & !str_detect(entity, "excluding")& str_detect(entity, "income"))
#inspecting the dataset
income_based_entity %>%
group_by(entity) %>%
summarize(
avg_access_electircity = mean(percentage_with_electricity_access, na.rm = TRUE) %>% round(2),
avg_access_fuel = mean(percentage_with_clean_fuel_access, na.rm = TRUE) %>% round(2),
sd_access_electircity = sd(percentage_with_electricity_access, na.rm = TRUE) %>% round(2),
sd_access_fuel = sd(percentage_with_clean_fuel_access, na.rm = TRUE) %>% round(2),
)
#make column names machine readable
energy_and_fuel<-janitor::clean_names(energy_and_fuel)
#creating three new columns: total_population, percentage_with_electricity_access and percentage_with_clean_fuel_access
percentage_energy_and_fuel <- energy_and_fuel %>%
mutate(total_population = number_of_people_with_access_to_electricity +number_of_people_without_access_to_electricity) %>%
mutate(percentage_with_electricity_access= number_of_people_with_access_to_electricity / total_population) %>%
mutate(percentage_with_clean_fuel_access= number_with_clean_fuels_cooking/total_population)
#filtering out income-based entity and subsetting them into income_based_entity dataframe
income_based_entity <- percentage_energy_and_fuel %>%
filter(str_detect(entity, "(?i)high|low|middle") & !str_detect(entity, "excluding")& str_detect(entity, "income"))
create_point_plot <- function(i) {
income_based_entity %>%
ggplot(aes_string(x = names(income_based_entity)[2], y = names(income_based_entity)[i]),
color = "entity") +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "purple") +  # Add trend lin
labs(
title = glue("The Trend of {names(income_based_entity)[i]}"),
y = glue("{names(income_based_entity)[i]}")
)+
scale_color_manual(values = c("blue", "red", "green","yellow","black"))
}
plots_list <- map(3:ncol(income_based_entity), create_point_plot)
rm(list = ls())
setwd("/Users/chenjiayi/Desktop/Computational/troubleshooting-legends-not-showing")
energy_and_fuel <- read_csv("Number of people with and without energy access (OWID based on World Bank, 2021).csv")
#make column names machine readable
energy_and_fuel<-janitor::clean_names(energy_and_fuel)
#creating three new columns: total_population, percentage_with_electricity_access and percentage_with_clean_fuel_access
percentage_energy_and_fuel <- energy_and_fuel %>%
mutate(total_population = number_of_people_with_access_to_electricity +number_of_people_without_access_to_electricity) %>%
mutate(percentage_with_electricity_access= number_of_people_with_access_to_electricity / total_population) %>%
mutate(percentage_with_clean_fuel_access= number_with_clean_fuels_cooking/total_population)
#filtering out income-based entity and subsetting them into income_based_entity dataframe
income_based_entity <- percentage_energy_and_fuel %>%
filter(str_detect(entity, "(?i)high|low|middle") & !str_detect(entity, "excluding")& str_detect(entity, "income"))
create_point_plot <- function(i) {
income_based_entity %>%
ggplot(aes_string(x = names(income_based_entity)[2], y = names(income_based_entity)[i]),
color = "entity") +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "purple") +  # Add trend lin
labs(
title = glue("The Trend of {names(income_based_entity)[i]}"),
y = glue("{names(income_based_entity)[i]}")
)+
scale_color_manual(values = c("blue", "red", "green","yellow","black"))
}
View(income_based_entity)
rm(list = ls())
setwd("/Users/chenjiayi/Desktop/Computational/troubleshooting-legends-not-showing")
energy_and_fuel <- read_csv("Number of people with and without energy access (OWID based on World Bank, 2021).csv")
#make column names machine readable
cleaned_energy_and_fuel<-janitor::clean_names(energy_and_fuel)
#creating three new columns: total_population, percentage_with_electricity_access and percentage_with_clean_fuel_access
percentage_energy_and_fuel <- cleaned_energy_and_fuel %>%
mutate(total_population = number_of_people_with_access_to_electricity +number_of_people_without_access_to_electricity) %>%
mutate(percentage_with_electricity_access= number_of_people_with_access_to_electricity / total_population) %>%
mutate(percentage_with_clean_fuel_access= number_with_clean_fuels_cooking/total_population)
#filtering out income-based entity and subsetting them into income_based_entity dataframe
income_based_entity <- percentage_energy_and_fuel %>%
filter(str_detect(entity, "(?i)high|low|middle") & !str_detect(entity, "excluding")& str_detect(entity, "income"))
create_point_plot <- function(i) {
income_based_entity %>%
ggplot(aes_string(x = names(income_based_entity)[2], y = names(income_based_entity)[i]),
color = "entity") +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "purple") +  # Add trend lin
labs(
title = glue("The Trend of {names(income_based_entity)[i]}"),
y = glue("{names(income_based_entity)[i]}")
)+
scale_color_manual(values = c("blue", "red", "green","yellow","black"))
}
plots_list <- map(3:ncol(income_based_entity), create_point_plot)
rm(list = ls())
setwd("/Users/chenjiayi/Desktop/Computational/troubleshooting-legends-not-showing")
energy_and_fuel <- read_csv("Number of people with and without energy access (OWID based on World Bank, 2021).csv")
#make column names machine readable
energy_and_fuel<-janitor::clean_names(energy_and_fuel)
#creating three new columns: total_population, percentage_with_electricity_access and percentage_with_clean_fuel_access
energy_and_fuel <- energy_and_fuel %>%
mutate(total_population = number_of_people_with_access_to_electricity +number_of_people_without_access_to_electricity) %>%
mutate(percentage_with_electricity_access= number_of_people_with_access_to_electricity / total_population) %>%
mutate(percentage_with_clean_fuel_access= number_with_clean_fuels_cooking/total_population)
#filtering out income-based entity and subsetting them into income_based_entity dataframe
income_based_entity <- energy_and_fuel %>%
filter(str_detect(entity, "(?i)high|low|middle") & !str_detect(entity, "excluding")& str_detect(entity, "income"))
create_point_plot <- function(i) {
income_based_entity %>%
ggplot(aes_string(x = names(income_based_entity)[2], y = names(income_based_entity)[i]),
color = "entity") +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "purple") +  # Add trend lin
labs(
title = glue("The Trend of {names(income_based_entity)[i]}"),
y = glue("{names(income_based_entity)[i]}")
)+
scale_color_manual(values = c("blue", "red", "green","yellow","black"))
}
plots_list <- map(3:ncol(income_based_entity), create_point_plot)
plots_list
