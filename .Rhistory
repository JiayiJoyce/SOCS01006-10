library(shiny)
ui <- fluidPage(
"This is my first Shiny app!"
)
server <- function(input, output, session) {
}
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
runApp('myfirstshinyapp')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
ui <- fluidPage(
"This is my first Shiny app!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
data <- read.csv("/Users/chenjiayi/Desktop/Computational/SOCS01006-10/emdat_app.csv")
fluidPage("Disaster Statistics","Trends")
#
fluidPage(
h1("Disasters"),
"Statistics",
"Trends",
br(),
"Emdat",
strong("data")
)
fluidPage(
titlePanel("Disaster Statistics Trends")
)
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Disaster Statistics Trends")
)
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Disaster Statistics Trends")
)
sidebarLayout(
sidebarPanel(selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
mainPanel("the results will go here") # add elements for outputs
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
# Header
h1("Disaster statistics trends"),
# Sidebar layout
sidebarLayout(
# Sidebar panel
sidebarPanel(
selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
# Main panel
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
# Header
h1("Disaster statistics trends"),
# Sidebar layout
sidebarLayout(
# Sidebar panel
sidebarPanel(
selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
# Main panel
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
variable <- switch(input$variable,
"Deaths" = "deaths",
"Injuries" = "injuries",
"Homelessness" = "homelessness")
data %>%
filter(country == input$country,
Year >= input$year_range[1],
Year <= input$year_range[2]) %>%
ggplot(aes(Year, .data[[variable]])) +
geom_line() +
labs(y = input$variable)
})
}
shinyApp(ui, server)
if (!require("pacman")) {
install.packages("pacman")
}
pacman::p_load(
shiny,
ggplot2,
dplyr)
options(scipen=999)
data <- read.csv("/Users/chenjiayi/Desktop/Computational/SOCS01006-10/emdat_app.csv")
install.packages("shiny")
library(shiny)
if (!require("pacman")) {
install.packages("pacman")
}
pacman::p_load(
shiny,
ggplot2,
dplyr)
options(scipen=999)
data <- read.csv("/Users/chenjiayi/Desktop/Computational/SOCS01006-10/emdat_app.csv")
#the app part----
ui <- fluidPage(
# Header
h1("Disaster statistics trends"),
# Sidebar layout
sidebarLayout(
# Sidebar panel
sidebarPanel(
selectInput(
inputId = "country",
label = "Select country",
choices = unique(data$country),
selected = "Belgium"
),
selectInput(
inputId = "variable",
label = "Select variable",
choices = c("Deaths", "Injuries", "Homelessness"),
selected = "Deaths"
),
sliderInput(
inputId = "year_range",
label = "Select year range",
min = min(data$Year),
max = max(data$Year),
value = c(min(data$Year), max(data$Year)),
step = 1,
sep = ""
)
),
# Main panel
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
variable <- switch(input$variable,
"Deaths" = "deaths",
"Injuries" = "injuries",
"Homelessness" = "homelessness")
data %>%
filter(country == input$country,
Year >= input$year_range[1],
Year <= input$year_range[2]) %>%
ggplot(aes(Year, .data[[variable]])) +
geom_line() +
labs(y = input$variable)
})
}
shinyApp(ui, server)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
